/*
 * generated by Xtext 2.25.0
 */
grammar InternalSensorHub;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.SensorHubGrammarAccess;

}

@parser::members {

 	private SensorHubGrammarAccess grammarAccess;

    public InternalSensorHubParser(TokenStream input, SensorHubGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SensorSystem";
   	}

   	@Override
   	protected SensorHubGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSensorSystem
entryRuleSensorSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorSystemRule()); }
	iv_ruleSensorSystem=ruleSensorSystem
	{ $current=$iv_ruleSensorSystem.current; }
	EOF;

// Rule SensorSystem
ruleSensorSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='system'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorSystemAccess().getSystemKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSensorSystemAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorSystemRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorSystemAccess().getDevicesDeviceParserRuleCall_2_0());
				}
				lv_devices_2_0=ruleDevice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorSystemRule());
					}
					add(
						$current,
						"devices",
						lv_devices_2_0,
						"org.xtext.example.mydsl.SensorHub.Device");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDevice
entryRuleDevice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeviceRule()); }
	iv_ruleDevice=ruleDevice
	{ $current=$iv_ruleDevice.current; }
	EOF;

// Rule Device
ruleDevice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeviceAccess().getFogParserRuleCall_0());
		}
		this_Fog_0=ruleFog
		{
			$current = $this_Fog_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeviceAccess().getEdgeParserRuleCall_1());
		}
		this_Edge_1=ruleEdge
		{
			$current = $this_Edge_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFog
entryRuleFog returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFogRule()); }
	iv_ruleFog=ruleFog
	{ $current=$iv_ruleFog.current; }
	EOF;

// Rule Fog
ruleFog returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fog'
		{
			newLeafNode(otherlv_0, grammarAccess.getFogAccess().getFogKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFogAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFogRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFogAccess().getComsComParserRuleCall_2_0());
				}
				lv_coms_2_0=ruleCom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFogRule());
					}
					set(
						$current,
						"coms",
						lv_coms_2_0,
						"org.xtext.example.mydsl.SensorHub.Com");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFogAccess().getDeviceRaspPiParserRuleCall_3_0());
				}
				lv_device_3_0=ruleRaspPi
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFogRule());
					}
					set(
						$current,
						"device",
						lv_device_3_0,
						"org.xtext.example.mydsl.SensorHub.RaspPi");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFogAccess().getEdgeDevicesEdgeParserRuleCall_4_0());
				}
				lv_edgeDevices_4_0=ruleEdge
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFogRule());
					}
					add(
						$current,
						"edgeDevices",
						lv_edgeDevices_4_0,
						"org.xtext.example.mydsl.SensorHub.Edge");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleRaspPi
entryRuleRaspPi returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRaspPiRule()); }
	iv_ruleRaspPi=ruleRaspPi
	{ $current=$iv_ruleRaspPi.current; }
	EOF;

// Rule RaspPi
ruleRaspPi returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRaspPiAccess().getRaspPiAction_0(),
					$current);
			}
		)
		otherlv_1='raspberryPi'
		{
			newLeafNode(otherlv_1, grammarAccess.getRaspPiAccess().getRaspberryPiKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRaspPiAccess().getStorageStorageParserRuleCall_2_0());
				}
				lv_storage_2_0=ruleStorage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRaspPiRule());
					}
					add(
						$current,
						"storage",
						lv_storage_2_0,
						"org.xtext.example.mydsl.SensorHub.Storage");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRaspPiAccess().getVisualizationVisualizerParserRuleCall_3_0());
				}
				lv_visualization_3_0=ruleVisualizer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRaspPiRule());
					}
					add(
						$current,
						"visualization",
						lv_visualization_3_0,
						"org.xtext.example.mydsl.SensorHub.Visualizer");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStorage
entryRuleStorage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStorageRule()); }
	iv_ruleStorage=ruleStorage
	{ $current=$iv_ruleStorage.current; }
	EOF;

// Rule Storage
ruleStorage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='storage'
		{
			newLeafNode(otherlv_0, grammarAccess.getStorageAccess().getStorageKeyword_0());
		}
		(
			(
				lv_type_1_0=RULE_ID
				{
					newLeafNode(lv_type_1_0, grammarAccess.getStorageAccess().getTypeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStorageRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleVisualizer
entryRuleVisualizer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVisualizerRule()); }
	iv_ruleVisualizer=ruleVisualizer
	{ $current=$iv_ruleVisualizer.current; }
	EOF;

// Rule Visualizer
ruleVisualizer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='vis'
		{
			newLeafNode(otherlv_0, grammarAccess.getVisualizerAccess().getVisKeyword_0());
		}
		(
			(
				lv_type_1_0=RULE_ID
				{
					newLeafNode(lv_type_1_0, grammarAccess.getVisualizerAccess().getTypeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVisualizerRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleEdge
entryRuleEdge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEdgeRule()); }
	iv_ruleEdge=ruleEdge
	{ $current=$iv_ruleEdge.current; }
	EOF;

// Rule Edge
ruleEdge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='edge'
		{
			newLeafNode(otherlv_0, grammarAccess.getEdgeAccess().getEdgeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEdgeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEdgeAccess().getDeviceArduinoParserRuleCall_2_0());
				}
				lv_device_2_0=ruleArduino
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEdgeRule());
					}
					set(
						$current,
						"device",
						lv_device_2_0,
						"org.xtext.example.mydsl.SensorHub.Arduino");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArduino
entryRuleArduino returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArduinoRule()); }
	iv_ruleArduino=ruleArduino
	{ $current=$iv_ruleArduino.current; }
	EOF;

// Rule Arduino
ruleArduino returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='arduino'
		{
			newLeafNode(otherlv_0, grammarAccess.getArduinoAccess().getArduinoKeyword_0());
		}
		otherlv_1='rate'
		{
			newLeafNode(otherlv_1, grammarAccess.getArduinoAccess().getRateKeyword_1());
		}
		(
			(
				lv_rate_2_0=RULE_INT
				{
					newLeafNode(lv_rate_2_0, grammarAccess.getArduinoAccess().getRateINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArduinoRule());
					}
					setWithLastConsumed(
						$current,
						"rate",
						lv_rate_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArduinoAccess().getSensorsSensorParserRuleCall_3_0());
				}
				lv_sensors_3_0=ruleSensor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArduinoRule());
					}
					add(
						$current,
						"sensors",
						lv_sensors_3_0,
						"org.xtext.example.mydsl.SensorHub.Sensor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCom
entryRuleCom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComRule()); }
	iv_ruleCom=ruleCom
	{ $current=$iv_ruleCom.current; }
	EOF;

// Rule Com
ruleCom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='com'
		{
			newLeafNode(otherlv_0, grammarAccess.getComAccess().getComKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getComAccess().getNrf24l01ParserRuleCall_1());
		}
		this_Nrf24l01_1=ruleNrf24l01
		{
			$current = $this_Nrf24l01_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNrf24l01
entryRuleNrf24l01 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNrf24l01Rule()); }
	iv_ruleNrf24l01=ruleNrf24l01
	{ $current=$iv_ruleNrf24l01.current; }
	EOF;

// Rule Nrf24l01
ruleNrf24l01 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='nrf24l01'
		{
			newLeafNode(otherlv_0, grammarAccess.getNrf24l01Access().getNrf24l01Keyword_0());
		}
		(
			(
				lv_timeout_1_0=RULE_INT
				{
					newLeafNode(lv_timeout_1_0, grammarAccess.getNrf24l01Access().getTimeoutINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNrf24l01Rule());
					}
					setWithLastConsumed(
						$current,
						"timeout",
						lv_timeout_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_ruleSensor=ruleSensor
	{ $current=$iv_ruleSensor.current; }
	EOF;

// Rule Sensor
ruleSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorAccess().getSensorKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getSensorAccess().getWater_levelParserRuleCall_1_0());
			}
			this_Water_level_1=ruleWater_level
			{
				$current = $this_Water_level_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getSensorAccess().getSr04ParserRuleCall_1_1());
			}
			this_Sr04_2=ruleSr04
			{
				$current = $this_Sr04_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getSensorAccess().getSoundParserRuleCall_1_2());
			}
			this_Sound_3=ruleSound
			{
				$current = $this_Sound_3.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			otherlv_4='rate'
			{
				newLeafNode(otherlv_4, grammarAccess.getSensorAccess().getRateKeyword_2_0());
			}
			(
				(
					lv_rate_5_0=RULE_INT
					{
						newLeafNode(lv_rate_5_0, grammarAccess.getSensorAccess().getRateINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSensorRule());
						}
						setWithLastConsumed(
							$current,
							"rate",
							lv_rate_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorAccess().getPreprocessorPreProcessorParserRuleCall_3_0());
				}
				lv_preprocessor_6_0=rulePreProcessor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorRule());
					}
					set(
						$current,
						"preprocessor",
						lv_preprocessor_6_0,
						"org.xtext.example.mydsl.SensorHub.PreProcessor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWater_level
entryRuleWater_level returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWater_levelRule()); }
	iv_ruleWater_level=ruleWater_level
	{ $current=$iv_ruleWater_level.current; }
	EOF;

// Rule Water_level
ruleWater_level returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='water'
		{
			newLeafNode(otherlv_0, grammarAccess.getWater_levelAccess().getWaterKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWater_levelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWater_levelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSr04
entryRuleSr04 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSr04Rule()); }
	iv_ruleSr04=ruleSr04
	{ $current=$iv_ruleSr04.current; }
	EOF;

// Rule Sr04
ruleSr04 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sr04'
		{
			newLeafNode(otherlv_0, grammarAccess.getSr04Access().getSr04Keyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSr04Access().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSr04Rule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSound
entryRuleSound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoundRule()); }
	iv_ruleSound=ruleSound
	{ $current=$iv_ruleSound.current; }
	EOF;

// Rule Sound
ruleSound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sound'
		{
			newLeafNode(otherlv_0, grammarAccess.getSoundAccess().getSoundKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSoundAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSoundRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulePreProcessor
entryRulePreProcessor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreProcessorRule()); }
	iv_rulePreProcessor=rulePreProcessor
	{ $current=$iv_rulePreProcessor.current; }
	EOF;

// Rule PreProcessor
rulePreProcessor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPreProcessorAccess().getAverageParserRuleCall_0());
		}
		this_Average_0=ruleAverage
		{
			$current = $this_Average_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPreProcessorAccess().getThresholdParserRuleCall_1());
		}
		this_Threshold_1=ruleThreshold
		{
			$current = $this_Threshold_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAverage
entryRuleAverage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAverageRule()); }
	iv_ruleAverage=ruleAverage
	{ $current=$iv_ruleAverage.current; }
	EOF;

// Rule Average
ruleAverage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='avg'
		{
			newLeafNode(otherlv_0, grammarAccess.getAverageAccess().getAvgKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getAverageAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAverageRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleThreshold
entryRuleThreshold returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThresholdRule()); }
	iv_ruleThreshold=ruleThreshold
	{ $current=$iv_ruleThreshold.current; }
	EOF;

// Rule Threshold
ruleThreshold returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='thresh'
		{
			newLeafNode(otherlv_0, grammarAccess.getThresholdAccess().getThreshKeyword_0());
		}
		(
			(
				lv_min_1_0=RULE_INT
				{
					newLeafNode(lv_min_1_0, grammarAccess.getThresholdAccess().getMinINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getThresholdRule());
					}
					setWithLastConsumed(
						$current,
						"min",
						lv_min_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='..'
		{
			newLeafNode(otherlv_2, grammarAccess.getThresholdAccess().getFullStopFullStopKeyword_2());
		}
		(
			(
				lv_max_3_0=RULE_INT
				{
					newLeafNode(lv_max_3_0, grammarAccess.getThresholdAccess().getMaxINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getThresholdRule());
					}
					setWithLastConsumed(
						$current,
						"max",
						lv_max_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
