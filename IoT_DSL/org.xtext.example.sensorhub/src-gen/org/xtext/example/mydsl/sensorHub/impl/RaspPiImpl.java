/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.sensorHub.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.sensorHub.RaspPi;
import org.xtext.example.mydsl.sensorHub.SensorHubPackage;
import org.xtext.example.mydsl.sensorHub.Storage;
import org.xtext.example.mydsl.sensorHub.Visualizer;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rasp Pi</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sensorHub.impl.RaspPiImpl#getStorage <em>Storage</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sensorHub.impl.RaspPiImpl#getVisualization <em>Visualization</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RaspPiImpl extends MinimalEObjectImpl.Container implements RaspPi
{
  /**
   * The cached value of the '{@link #getStorage() <em>Storage</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStorage()
   * @generated
   * @ordered
   */
  protected EList<Storage> storage;

  /**
   * The cached value of the '{@link #getVisualization() <em>Visualization</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisualization()
   * @generated
   * @ordered
   */
  protected EList<Visualizer> visualization;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RaspPiImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SensorHubPackage.Literals.RASP_PI;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Storage> getStorage()
  {
    if (storage == null)
    {
      storage = new EObjectContainmentEList<Storage>(Storage.class, this, SensorHubPackage.RASP_PI__STORAGE);
    }
    return storage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Visualizer> getVisualization()
  {
    if (visualization == null)
    {
      visualization = new EObjectContainmentEList<Visualizer>(Visualizer.class, this, SensorHubPackage.RASP_PI__VISUALIZATION);
    }
    return visualization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SensorHubPackage.RASP_PI__STORAGE:
        return ((InternalEList<?>)getStorage()).basicRemove(otherEnd, msgs);
      case SensorHubPackage.RASP_PI__VISUALIZATION:
        return ((InternalEList<?>)getVisualization()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SensorHubPackage.RASP_PI__STORAGE:
        return getStorage();
      case SensorHubPackage.RASP_PI__VISUALIZATION:
        return getVisualization();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SensorHubPackage.RASP_PI__STORAGE:
        getStorage().clear();
        getStorage().addAll((Collection<? extends Storage>)newValue);
        return;
      case SensorHubPackage.RASP_PI__VISUALIZATION:
        getVisualization().clear();
        getVisualization().addAll((Collection<? extends Visualizer>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SensorHubPackage.RASP_PI__STORAGE:
        getStorage().clear();
        return;
      case SensorHubPackage.RASP_PI__VISUALIZATION:
        getVisualization().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SensorHubPackage.RASP_PI__STORAGE:
        return storage != null && !storage.isEmpty();
      case SensorHubPackage.RASP_PI__VISUALIZATION:
        return visualization != null && !visualization.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //RaspPiImpl
