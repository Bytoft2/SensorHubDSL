/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.sensorHub.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.sensorHub.Com;
import org.xtext.example.mydsl.sensorHub.Edge;
import org.xtext.example.mydsl.sensorHub.Fog;
import org.xtext.example.mydsl.sensorHub.RaspPi;
import org.xtext.example.mydsl.sensorHub.SensorHubPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Fog</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sensorHub.impl.FogImpl#getComs <em>Coms</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sensorHub.impl.FogImpl#getDevice <em>Device</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sensorHub.impl.FogImpl#getEdgeDevices <em>Edge Devices</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FogImpl extends DeviceImpl implements Fog
{
  /**
   * The cached value of the '{@link #getComs() <em>Coms</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComs()
   * @generated
   * @ordered
   */
  protected Com coms;

  /**
   * The cached value of the '{@link #getDevice() <em>Device</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDevice()
   * @generated
   * @ordered
   */
  protected RaspPi device;

  /**
   * The cached value of the '{@link #getEdgeDevices() <em>Edge Devices</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEdgeDevices()
   * @generated
   * @ordered
   */
  protected EList<Edge> edgeDevices;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FogImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SensorHubPackage.Literals.FOG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Com getComs()
  {
    return coms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComs(Com newComs, NotificationChain msgs)
  {
    Com oldComs = coms;
    coms = newComs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SensorHubPackage.FOG__COMS, oldComs, newComs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComs(Com newComs)
  {
    if (newComs != coms)
    {
      NotificationChain msgs = null;
      if (coms != null)
        msgs = ((InternalEObject)coms).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SensorHubPackage.FOG__COMS, null, msgs);
      if (newComs != null)
        msgs = ((InternalEObject)newComs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SensorHubPackage.FOG__COMS, null, msgs);
      msgs = basicSetComs(newComs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorHubPackage.FOG__COMS, newComs, newComs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RaspPi getDevice()
  {
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDevice(RaspPi newDevice, NotificationChain msgs)
  {
    RaspPi oldDevice = device;
    device = newDevice;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SensorHubPackage.FOG__DEVICE, oldDevice, newDevice);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDevice(RaspPi newDevice)
  {
    if (newDevice != device)
    {
      NotificationChain msgs = null;
      if (device != null)
        msgs = ((InternalEObject)device).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SensorHubPackage.FOG__DEVICE, null, msgs);
      if (newDevice != null)
        msgs = ((InternalEObject)newDevice).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SensorHubPackage.FOG__DEVICE, null, msgs);
      msgs = basicSetDevice(newDevice, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorHubPackage.FOG__DEVICE, newDevice, newDevice));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Edge> getEdgeDevices()
  {
    if (edgeDevices == null)
    {
      edgeDevices = new EObjectContainmentEList<Edge>(Edge.class, this, SensorHubPackage.FOG__EDGE_DEVICES);
    }
    return edgeDevices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SensorHubPackage.FOG__COMS:
        return basicSetComs(null, msgs);
      case SensorHubPackage.FOG__DEVICE:
        return basicSetDevice(null, msgs);
      case SensorHubPackage.FOG__EDGE_DEVICES:
        return ((InternalEList<?>)getEdgeDevices()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SensorHubPackage.FOG__COMS:
        return getComs();
      case SensorHubPackage.FOG__DEVICE:
        return getDevice();
      case SensorHubPackage.FOG__EDGE_DEVICES:
        return getEdgeDevices();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SensorHubPackage.FOG__COMS:
        setComs((Com)newValue);
        return;
      case SensorHubPackage.FOG__DEVICE:
        setDevice((RaspPi)newValue);
        return;
      case SensorHubPackage.FOG__EDGE_DEVICES:
        getEdgeDevices().clear();
        getEdgeDevices().addAll((Collection<? extends Edge>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SensorHubPackage.FOG__COMS:
        setComs((Com)null);
        return;
      case SensorHubPackage.FOG__DEVICE:
        setDevice((RaspPi)null);
        return;
      case SensorHubPackage.FOG__EDGE_DEVICES:
        getEdgeDevices().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SensorHubPackage.FOG__COMS:
        return coms != null;
      case SensorHubPackage.FOG__DEVICE:
        return device != null;
      case SensorHubPackage.FOG__EDGE_DEVICES:
        return edgeDevices != null && !edgeDevices.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FogImpl
