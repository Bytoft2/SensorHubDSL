/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.sensorHub.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.sensorHub.PreProcessor;
import org.xtext.example.mydsl.sensorHub.Sensor;
import org.xtext.example.mydsl.sensorHub.SensorHubPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sensor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sensorHub.impl.SensorImpl#getRate <em>Rate</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sensorHub.impl.SensorImpl#getPreprocessor <em>Preprocessor</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sensorHub.impl.SensorImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SensorImpl extends MinimalEObjectImpl.Container implements Sensor
{
  /**
   * The default value of the '{@link #getRate() <em>Rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRate()
   * @generated
   * @ordered
   */
  protected static final int RATE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getRate() <em>Rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRate()
   * @generated
   * @ordered
   */
  protected int rate = RATE_EDEFAULT;

  /**
   * The cached value of the '{@link #getPreprocessor() <em>Preprocessor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreprocessor()
   * @generated
   * @ordered
   */
  protected PreProcessor preprocessor;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SensorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SensorHubPackage.Literals.SENSOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getRate()
  {
    return rate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRate(int newRate)
  {
    int oldRate = rate;
    rate = newRate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorHubPackage.SENSOR__RATE, oldRate, rate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PreProcessor getPreprocessor()
  {
    return preprocessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPreprocessor(PreProcessor newPreprocessor, NotificationChain msgs)
  {
    PreProcessor oldPreprocessor = preprocessor;
    preprocessor = newPreprocessor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SensorHubPackage.SENSOR__PREPROCESSOR, oldPreprocessor, newPreprocessor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPreprocessor(PreProcessor newPreprocessor)
  {
    if (newPreprocessor != preprocessor)
    {
      NotificationChain msgs = null;
      if (preprocessor != null)
        msgs = ((InternalEObject)preprocessor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SensorHubPackage.SENSOR__PREPROCESSOR, null, msgs);
      if (newPreprocessor != null)
        msgs = ((InternalEObject)newPreprocessor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SensorHubPackage.SENSOR__PREPROCESSOR, null, msgs);
      msgs = basicSetPreprocessor(newPreprocessor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorHubPackage.SENSOR__PREPROCESSOR, newPreprocessor, newPreprocessor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SensorHubPackage.SENSOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SensorHubPackage.SENSOR__PREPROCESSOR:
        return basicSetPreprocessor(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SensorHubPackage.SENSOR__RATE:
        return getRate();
      case SensorHubPackage.SENSOR__PREPROCESSOR:
        return getPreprocessor();
      case SensorHubPackage.SENSOR__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SensorHubPackage.SENSOR__RATE:
        setRate((Integer)newValue);
        return;
      case SensorHubPackage.SENSOR__PREPROCESSOR:
        setPreprocessor((PreProcessor)newValue);
        return;
      case SensorHubPackage.SENSOR__NAME:
        setName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SensorHubPackage.SENSOR__RATE:
        setRate(RATE_EDEFAULT);
        return;
      case SensorHubPackage.SENSOR__PREPROCESSOR:
        setPreprocessor((PreProcessor)null);
        return;
      case SensorHubPackage.SENSOR__NAME:
        setName(NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SensorHubPackage.SENSOR__RATE:
        return rate != RATE_EDEFAULT;
      case SensorHubPackage.SENSOR__PREPROCESSOR:
        return preprocessor != null;
      case SensorHubPackage.SENSOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (rate: ");
    result.append(rate);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //SensorImpl
