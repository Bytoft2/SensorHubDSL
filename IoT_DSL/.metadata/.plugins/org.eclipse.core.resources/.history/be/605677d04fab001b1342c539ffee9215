/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.xtext.example.mydsl.sensorHub.Com;
import org.xtext.example.mydsl.sensorHub.Edge;
import org.xtext.example.mydsl.sensorHub.Fog;
import org.xtext.example.mydsl.sensorHub.Nrf24l01;
import org.xtext.example.mydsl.sensorHub.RaspPi;
import org.xtext.example.mydsl.sensorHub.SensorSystem;
import org.xtext.example.mydsl.sensorHub.Storage;
import org.xtext.example.mydsl.sensorHub.Visualizer;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SensorHubGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final SensorSystem modelInstance = Iterators.<SensorSystem>filter(resource.getAllContents(), SensorSystem.class).next();
    final Consumer<Fog> _function = (Fog it) -> {
      this.generateFogFile(it, fsa);
    };
    Iterables.<Fog>filter(modelInstance.getDevices(), Fog.class).forEach(_function);
    final Consumer<Edge> _function_1 = (Edge it) -> {
      this.generateEdgeFile(it, fsa);
    };
    Iterables.<Edge>filter(modelInstance.getDevices(), Edge.class).forEach(_function_1);
  }
  
  public void generateEdgeFile(final Edge edge, final IFileSystemAccess2 fsa) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field generateArduino is undefined for the type Edge & Arduino");
  }
  
  public void generateFogFile(final Fog fog, final IFileSystemAccess2 fsa) {
    RaspPi _device = fog.getDevice();
    boolean _matched = false;
    if (_device instanceof RaspPi) {
      _matched=true;
      String _name = fog.getName();
      String _plus = ("./" + _name);
      String _plus_1 = (_plus + "/");
      String _name_1 = fog.getName();
      String _plus_2 = (_plus_1 + _name_1);
      String _plus_3 = (_plus_2 + ".py");
      fsa.generateFile(_plus_3, this.generateRaspPi(fog));
    }
  }
  
  public CharSequence generateRaspPi(final Fog pi) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import time");
    _builder.newLine();
    _builder.append("import struct");
    _builder.newLine();
    _builder.append("import board");
    _builder.newLine();
    _builder.append("import digitalio");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#Setup of communication");
    _builder.newLine();
    CharSequence _generateComSetup = this.generateComSetup(pi.getComs(), pi.getEdgeDevices());
    _builder.append(_generateComSetup);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#Reciever function");
    _builder.newLine();
    CharSequence _generateReceiverFunction = this.generateReceiverFunction(pi.getComs());
    _builder.append(_generateReceiverFunction);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("#Edge device storage and viz code: ");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Storage> _storage = pi.getDevice().getStorage();
      for(final Storage s : _storage) {
        {
          String _type = s.getType();
          boolean _equals = Objects.equal(_type, "txt");
          if (_equals) {
            CharSequence _generateStorageTxt = this.generateStorageTxt();
            _builder.append(_generateStorageTxt);
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
      }
    }
    {
      EList<Visualizer> _visualization = pi.getDevice().getVisualization();
      for(final Visualizer v : _visualization) {
        {
          String _type_1 = v.getType();
          boolean _equals_1 = Objects.equal(_type_1, "console");
          if (_equals_1) {
            CharSequence _generatePythonVizConsole = this.generatePythonVizConsole();
            _builder.append(_generatePythonVizConsole);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  protected CharSequence _generateReceiverFunction(final Fog f) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _generateReceiverFunction(final Nrf24l01 nrf) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def receive(timeout=");
    int _timeout = nrf.getTimeout();
    _builder.append(_timeout);
    _builder.append("):");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("\"\"\"Polls the radio and prints the received value. This method expires");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after if no transmission is recieved within the timeout\"\"\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("# put radio into RX mode and power up");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("nrf.listen = True");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("start = time.monotonic()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while (time.monotonic() - start) < timeout:");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("if nrf.available():");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("# grab information about the received payload");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("payload_size, pipe_number = (nrf.any(), nrf.pipe)");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("# fetch 1 payload from RX FIFO");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("buffer = nrf.read()  # also clears nrf.irq_dr status flag");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("# format string \"<f\"");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("# buffer[:4] truncates padded 0s if dynamic payloads are disabled");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("payload[0] = struct.unpack(\"<f\", buffer[:4])[0]");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("# print details about the received packet");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("timestamp = time.time()");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("save(addresses[pipe_number-1], timestamp, payload[0])");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("visualize(addresses[pipe_number-1], timestamp, payload[0])");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("start = time.monotonic()");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("# recommended behavior is to keep in TX mode while idle");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("nrf.listen = False  # put the nRF24L01 is in TX mode");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateComSetup(final Com c, final EList<Edge> edges) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("from circuitpython_nrf24l01.rf24 import RF24");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# digital output pins");
    _builder.newLine();
    _builder.append("ce = digitalio.DigitalInOut(board.D4)");
    _builder.newLine();
    _builder.append("csn = digitalio.DigitalInOut(board.D5)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# init spi bus object");
    _builder.newLine();
    _builder.append("spi = board.SPI()  ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# initialize the nRF24L01 on the spi bus object");
    _builder.newLine();
    _builder.append("nrf = RF24(spi, csn, ce)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# set power amplifier level (RF24_PA_MIN, RF24_PA_LOW, RF24_PA_MED, RF24_PA_HIGH)");
    _builder.newLine();
    _builder.append("nrf.pa_level = RF24_PA_LOW");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# addresses needs to be in a buffer protocol object (bytearray)");
    _builder.newLine();
    _builder.append("addresses = [");
    {
      boolean _hasElements = false;
      for(final Edge e : edges) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append("b\"");
        String _name = e.getName();
        _builder.append(_name);
        _builder.append("\"");
      }
    }
    _builder.append("]");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("# set RX address of TX node into RX pipes");
    _builder.newLine();
    {
      int _size = edges.size();
      IntegerRange _upTo = new IntegerRange(1, _size);
      for(final Integer i : _upTo) {
        _builder.append("nrf.open_rx_pipe(");
        _builder.append(i);
        _builder.append(", address[");
        _builder.append(i);
        _builder.append("])  # using pipe ");
        _builder.append(i);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("# list to store float number for the payloads sent");
    _builder.newLine();
    _builder.append("payload = [0.0]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# for compatibility with TMRh20 library");
    _builder.newLine();
    _builder.append("nrf.allow_ask_no_ack = False");
    _builder.newLine();
    _builder.append("nrf.dynamic_payloads = False");
    _builder.newLine();
    _builder.append("nrf.payload_length = 32");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateStorageTxt() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def saveTxt(addr, timestamp, value):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with open(\"./\" + str(addr) + \".txt\", \"a\") as f:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("f.write(str(timestamp) + \", \" + str(value) + \"\\n\")");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePythonVizConsole() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def toConsole(addr, timestamp, value):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("print(str(addr) + \": \" + str(timestamp) + \", \" + str(value))");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateArduino() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//Send.ino");
    _builder.newLine();
    _builder.append("#include<SPI.h>");
    _builder.newLine();
    _builder.append("#include<RF24.h>");
    _builder.newLine();
    _builder.append("// ce, csn pins");
    _builder.newLine();
    _builder.append("RF24 radio(9, 10);");
    _builder.newLine();
    _builder.append("uint8_t addresses[][6] = {\"1Node\", \"2Node\"};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void setup(void){");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.begin(9600);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("radio.begin();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("radio.setPALevel(RF24_PA_MIN);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("radio.openWritingPipe(addresses[1]);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("radio.setPayloadSize(32);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("radio.powerUp();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void loop(void){");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("const char text[] = \"Hello World is awesome\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Serial.write(text);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("radio.write(text, sizeof(text));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("delay(1000);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateReceiverFunction(final EObject f) {
    if (f instanceof Fog) {
      return _generateReceiverFunction((Fog)f);
    } else if (f instanceof Nrf24l01) {
      return _generateReceiverFunction((Nrf24l01)f);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(f).toString());
    }
  }
}
