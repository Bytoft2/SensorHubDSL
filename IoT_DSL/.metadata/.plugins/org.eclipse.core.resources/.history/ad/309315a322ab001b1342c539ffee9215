/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.sensorHub.*
import org.xtext.example.mydsl.sensorHub.RaspPi

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SensorHubGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val modelInstance = resource.allContents.filter(SensorSystem).next
		modelInstance.devices.filter(Fog).forEach[generateFogFile(fsa)]
	}
	
	def generateFogFile(Fog fog, IFileSystemAccess2 fsa) {
		switch fog {
			RaspPi: 
				fsa.generateFile("./"+fog.name+"/"+fog.name+".py", fog.generateRaspPi)
				//TODO Generate storage file on pi
		}
	}
	
	def CharSequence generateRaspPi(Fog pi) '''
	import time
	import struct
	import board
	import digitalio
	
	#Edge devices: «FOR e:pi.edgeDevices»
	#«e.name» //fix enheritance in xtext
	«ENDFOR»
	'''
	
	
}
