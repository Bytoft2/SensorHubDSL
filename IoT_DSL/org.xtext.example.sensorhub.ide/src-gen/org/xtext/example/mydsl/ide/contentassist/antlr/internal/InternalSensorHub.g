/*
 * generated by Xtext 2.25.0
 */
grammar InternalSensorHub;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.SensorHubGrammarAccess;

}
@parser::members {
	private SensorHubGrammarAccess grammarAccess;

	public void setGrammarAccess(SensorHubGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSensorSystem
entryRuleSensorSystem
:
{ before(grammarAccess.getSensorSystemRule()); }
	 ruleSensorSystem
{ after(grammarAccess.getSensorSystemRule()); } 
	 EOF 
;

// Rule SensorSystem
ruleSensorSystem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorSystemAccess().getGroup()); }
		(rule__SensorSystem__Group__0)
		{ after(grammarAccess.getSensorSystemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDevice
entryRuleDevice
:
{ before(grammarAccess.getDeviceRule()); }
	 ruleDevice
{ after(grammarAccess.getDeviceRule()); } 
	 EOF 
;

// Rule Device
ruleDevice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeviceAccess().getAlternatives()); }
		(rule__Device__Alternatives)
		{ after(grammarAccess.getDeviceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFog
entryRuleFog
:
{ before(grammarAccess.getFogRule()); }
	 ruleFog
{ after(grammarAccess.getFogRule()); } 
	 EOF 
;

// Rule Fog
ruleFog 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFogAccess().getGroup()); }
		(rule__Fog__Group__0)
		{ after(grammarAccess.getFogAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRaspPi
entryRuleRaspPi
:
{ before(grammarAccess.getRaspPiRule()); }
	 ruleRaspPi
{ after(grammarAccess.getRaspPiRule()); } 
	 EOF 
;

// Rule RaspPi
ruleRaspPi 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRaspPiAccess().getGroup()); }
		(rule__RaspPi__Group__0)
		{ after(grammarAccess.getRaspPiAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStorage
entryRuleStorage
:
{ before(grammarAccess.getStorageRule()); }
	 ruleStorage
{ after(grammarAccess.getStorageRule()); } 
	 EOF 
;

// Rule Storage
ruleStorage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStorageAccess().getGroup()); }
		(rule__Storage__Group__0)
		{ after(grammarAccess.getStorageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVisualizer
entryRuleVisualizer
:
{ before(grammarAccess.getVisualizerRule()); }
	 ruleVisualizer
{ after(grammarAccess.getVisualizerRule()); } 
	 EOF 
;

// Rule Visualizer
ruleVisualizer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVisualizerAccess().getGroup()); }
		(rule__Visualizer__Group__0)
		{ after(grammarAccess.getVisualizerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEdge
entryRuleEdge
:
{ before(grammarAccess.getEdgeRule()); }
	 ruleEdge
{ after(grammarAccess.getEdgeRule()); } 
	 EOF 
;

// Rule Edge
ruleEdge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEdgeAccess().getGroup()); }
		(rule__Edge__Group__0)
		{ after(grammarAccess.getEdgeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArduino
entryRuleArduino
:
{ before(grammarAccess.getArduinoRule()); }
	 ruleArduino
{ after(grammarAccess.getArduinoRule()); } 
	 EOF 
;

// Rule Arduino
ruleArduino 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArduinoAccess().getGroup()); }
		(rule__Arduino__Group__0)
		{ after(grammarAccess.getArduinoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCom
entryRuleCom
:
{ before(grammarAccess.getComRule()); }
	 ruleCom
{ after(grammarAccess.getComRule()); } 
	 EOF 
;

// Rule Com
ruleCom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComAccess().getGroup()); }
		(rule__Com__Group__0)
		{ after(grammarAccess.getComAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNrf24l01
entryRuleNrf24l01
:
{ before(grammarAccess.getNrf24l01Rule()); }
	 ruleNrf24l01
{ after(grammarAccess.getNrf24l01Rule()); } 
	 EOF 
;

// Rule Nrf24l01
ruleNrf24l01 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNrf24l01Access().getGroup()); }
		(rule__Nrf24l01__Group__0)
		{ after(grammarAccess.getNrf24l01Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getGroup()); }
		(rule__Sensor__Group__0)
		{ after(grammarAccess.getSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWater_level
entryRuleWater_level
:
{ before(grammarAccess.getWater_levelRule()); }
	 ruleWater_level
{ after(grammarAccess.getWater_levelRule()); } 
	 EOF 
;

// Rule Water_level
ruleWater_level 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWater_levelAccess().getGroup()); }
		(rule__Water_level__Group__0)
		{ after(grammarAccess.getWater_levelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSr04
entryRuleSr04
:
{ before(grammarAccess.getSr04Rule()); }
	 ruleSr04
{ after(grammarAccess.getSr04Rule()); } 
	 EOF 
;

// Rule Sr04
ruleSr04 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSr04Access().getGroup()); }
		(rule__Sr04__Group__0)
		{ after(grammarAccess.getSr04Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSound
entryRuleSound
:
{ before(grammarAccess.getSoundRule()); }
	 ruleSound
{ after(grammarAccess.getSoundRule()); } 
	 EOF 
;

// Rule Sound
ruleSound 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoundAccess().getGroup()); }
		(rule__Sound__Group__0)
		{ after(grammarAccess.getSoundAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePreProcessor
entryRulePreProcessor
:
{ before(grammarAccess.getPreProcessorRule()); }
	 rulePreProcessor
{ after(grammarAccess.getPreProcessorRule()); } 
	 EOF 
;

// Rule PreProcessor
rulePreProcessor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreProcessorAccess().getAlternatives()); }
		(rule__PreProcessor__Alternatives)
		{ after(grammarAccess.getPreProcessorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAverage
entryRuleAverage
:
{ before(grammarAccess.getAverageRule()); }
	 ruleAverage
{ after(grammarAccess.getAverageRule()); } 
	 EOF 
;

// Rule Average
ruleAverage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAverageAccess().getGroup()); }
		(rule__Average__Group__0)
		{ after(grammarAccess.getAverageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleThreshold
entryRuleThreshold
:
{ before(grammarAccess.getThresholdRule()); }
	 ruleThreshold
{ after(grammarAccess.getThresholdRule()); } 
	 EOF 
;

// Rule Threshold
ruleThreshold 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getThresholdAccess().getGroup()); }
		(rule__Threshold__Group__0)
		{ after(grammarAccess.getThresholdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviceAccess().getFogParserRuleCall_0()); }
		ruleFog
		{ after(grammarAccess.getDeviceAccess().getFogParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeviceAccess().getEdgeParserRuleCall_1()); }
		ruleEdge
		{ after(grammarAccess.getDeviceAccess().getEdgeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getWater_levelParserRuleCall_1_0()); }
		ruleWater_level
		{ after(grammarAccess.getSensorAccess().getWater_levelParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSr04ParserRuleCall_1_1()); }
		ruleSr04
		{ after(grammarAccess.getSensorAccess().getSr04ParserRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSoundParserRuleCall_1_2()); }
		ruleSound
		{ after(grammarAccess.getSensorAccess().getSoundParserRuleCall_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreProcessor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreProcessorAccess().getAverageParserRuleCall_0()); }
		ruleAverage
		{ after(grammarAccess.getPreProcessorAccess().getAverageParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPreProcessorAccess().getThresholdParserRuleCall_1()); }
		ruleThreshold
		{ after(grammarAccess.getPreProcessorAccess().getThresholdParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorSystem__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorSystem__Group__0__Impl
	rule__SensorSystem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorSystem__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorSystemAccess().getSystemKeyword_0()); }
	'system'
	{ after(grammarAccess.getSensorSystemAccess().getSystemKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorSystem__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorSystem__Group__1__Impl
	rule__SensorSystem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorSystem__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorSystemAccess().getNameAssignment_1()); }
	(rule__SensorSystem__NameAssignment_1)
	{ after(grammarAccess.getSensorSystemAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorSystem__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorSystem__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorSystem__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorSystemAccess().getDevicesAssignment_2()); }
	(rule__SensorSystem__DevicesAssignment_2)*
	{ after(grammarAccess.getSensorSystemAccess().getDevicesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fog__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fog__Group__0__Impl
	rule__Fog__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFogAccess().getFogKeyword_0()); }
	'fog'
	{ after(grammarAccess.getFogAccess().getFogKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fog__Group__1__Impl
	rule__Fog__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFogAccess().getNameAssignment_1()); }
	(rule__Fog__NameAssignment_1)
	{ after(grammarAccess.getFogAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fog__Group__2__Impl
	rule__Fog__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFogAccess().getComsAssignment_2()); }
	(rule__Fog__ComsAssignment_2)
	{ after(grammarAccess.getFogAccess().getComsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fog__Group__3__Impl
	rule__Fog__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFogAccess().getDeviceAssignment_3()); }
	(rule__Fog__DeviceAssignment_3)
	{ after(grammarAccess.getFogAccess().getDeviceAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fog__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFogAccess().getEdgeDevicesAssignment_4()); }
	(rule__Fog__EdgeDevicesAssignment_4)*
	{ after(grammarAccess.getFogAccess().getEdgeDevicesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RaspPi__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RaspPi__Group__0__Impl
	rule__RaspPi__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RaspPi__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRaspPiAccess().getRaspPiAction_0()); }
	()
	{ after(grammarAccess.getRaspPiAccess().getRaspPiAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RaspPi__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RaspPi__Group__1__Impl
	rule__RaspPi__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RaspPi__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRaspPiAccess().getRaspberryPiKeyword_1()); }
	'raspberryPi'
	{ after(grammarAccess.getRaspPiAccess().getRaspberryPiKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RaspPi__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RaspPi__Group__2__Impl
	rule__RaspPi__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RaspPi__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRaspPiAccess().getStorageAssignment_2()); }
	(rule__RaspPi__StorageAssignment_2)*
	{ after(grammarAccess.getRaspPiAccess().getStorageAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RaspPi__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RaspPi__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RaspPi__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRaspPiAccess().getVisualizationAssignment_3()); }
	(rule__RaspPi__VisualizationAssignment_3)*
	{ after(grammarAccess.getRaspPiAccess().getVisualizationAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Storage__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Storage__Group__0__Impl
	rule__Storage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Storage__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStorageAccess().getStorageKeyword_0()); }
	'storage'
	{ after(grammarAccess.getStorageAccess().getStorageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Storage__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Storage__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Storage__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStorageAccess().getTypeAssignment_1()); }
	(rule__Storage__TypeAssignment_1)
	{ after(grammarAccess.getStorageAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Visualizer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Visualizer__Group__0__Impl
	rule__Visualizer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Visualizer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVisualizerAccess().getVisKeyword_0()); }
	'vis'
	{ after(grammarAccess.getVisualizerAccess().getVisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visualizer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Visualizer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Visualizer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVisualizerAccess().getTypeAssignment_1()); }
	(rule__Visualizer__TypeAssignment_1)
	{ after(grammarAccess.getVisualizerAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Edge__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group__0__Impl
	rule__Edge__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getEdgeKeyword_0()); }
	'edge'
	{ after(grammarAccess.getEdgeAccess().getEdgeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group__1__Impl
	rule__Edge__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getNameAssignment_1()); }
	(rule__Edge__NameAssignment_1)
	{ after(grammarAccess.getEdgeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getDeviceAssignment_2()); }
	(rule__Edge__DeviceAssignment_2)
	{ after(grammarAccess.getEdgeAccess().getDeviceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arduino__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arduino__Group__0__Impl
	rule__Arduino__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arduino__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArduinoAccess().getArduinoKeyword_0()); }
	'arduino'
	{ after(grammarAccess.getArduinoAccess().getArduinoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arduino__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arduino__Group__1__Impl
	rule__Arduino__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Arduino__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArduinoAccess().getRateKeyword_1()); }
	'rate'
	{ after(grammarAccess.getArduinoAccess().getRateKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arduino__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arduino__Group__2__Impl
	rule__Arduino__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Arduino__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArduinoAccess().getRateAssignment_2()); }
	(rule__Arduino__RateAssignment_2)
	{ after(grammarAccess.getArduinoAccess().getRateAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arduino__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arduino__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arduino__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArduinoAccess().getSensorsAssignment_3()); }
	(rule__Arduino__SensorsAssignment_3)*
	{ after(grammarAccess.getArduinoAccess().getSensorsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Com__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Com__Group__0__Impl
	rule__Com__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Com__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComAccess().getComKeyword_0()); }
	'com'
	{ after(grammarAccess.getComAccess().getComKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Com__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Com__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Com__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComAccess().getNrf24l01ParserRuleCall_1()); }
	ruleNrf24l01
	{ after(grammarAccess.getComAccess().getNrf24l01ParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nrf24l01__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nrf24l01__Group__0__Impl
	rule__Nrf24l01__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nrf24l01__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNrf24l01Access().getNrf24l01Keyword_0()); }
	'nrf24l01'
	{ after(grammarAccess.getNrf24l01Access().getNrf24l01Keyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nrf24l01__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nrf24l01__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nrf24l01__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNrf24l01Access().getTimeoutAssignment_1()); }
	(rule__Nrf24l01__TimeoutAssignment_1)
	{ after(grammarAccess.getNrf24l01Access().getTimeoutAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorKeyword_0()); }
	'sensor'
	{ after(grammarAccess.getSensorAccess().getSensorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__1__Impl
	rule__Sensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getAlternatives_1()); }
	(rule__Sensor__Alternatives_1)
	{ after(grammarAccess.getSensorAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__2__Impl
	rule__Sensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_2()); }
	(rule__Sensor__Group_2__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getPreprocessorAssignment_3()); }
	(rule__Sensor__PreprocessorAssignment_3)
	{ after(grammarAccess.getSensorAccess().getPreprocessorAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_2__0__Impl
	rule__Sensor__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getRateKeyword_2_0()); }
	'rate'
	{ after(grammarAccess.getSensorAccess().getRateKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getRateAssignment_2_1()); }
	(rule__Sensor__RateAssignment_2_1)
	{ after(grammarAccess.getSensorAccess().getRateAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Water_level__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Water_level__Group__0__Impl
	rule__Water_level__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Water_level__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWater_levelAccess().getWaterKeyword_0()); }
	'water'
	{ after(grammarAccess.getWater_levelAccess().getWaterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Water_level__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Water_level__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Water_level__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWater_levelAccess().getNameAssignment_1()); }
	(rule__Water_level__NameAssignment_1)
	{ after(grammarAccess.getWater_levelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sr04__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sr04__Group__0__Impl
	rule__Sr04__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sr04__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSr04Access().getSr04Keyword_0()); }
	'sr04'
	{ after(grammarAccess.getSr04Access().getSr04Keyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sr04__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sr04__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sr04__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSr04Access().getNameAssignment_1()); }
	(rule__Sr04__NameAssignment_1)
	{ after(grammarAccess.getSr04Access().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sound__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__0__Impl
	rule__Sound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getSoundKeyword_0()); }
	'sound'
	{ after(grammarAccess.getSoundAccess().getSoundKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sound__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoundAccess().getNameAssignment_1()); }
	(rule__Sound__NameAssignment_1)
	{ after(grammarAccess.getSoundAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Average__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Average__Group__0__Impl
	rule__Average__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Average__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAverageAccess().getAvgKeyword_0()); }
	'avg'
	{ after(grammarAccess.getAverageAccess().getAvgKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Average__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Average__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Average__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAverageAccess().getValueAssignment_1()); }
	(rule__Average__ValueAssignment_1)
	{ after(grammarAccess.getAverageAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Threshold__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Threshold__Group__0__Impl
	rule__Threshold__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThresholdAccess().getThreshKeyword_0()); }
	'thresh'
	{ after(grammarAccess.getThresholdAccess().getThreshKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Threshold__Group__1__Impl
	rule__Threshold__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThresholdAccess().getMinAssignment_1()); }
	(rule__Threshold__MinAssignment_1)
	{ after(grammarAccess.getThresholdAccess().getMinAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Threshold__Group__2__Impl
	rule__Threshold__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThresholdAccess().getFullStopFullStopKeyword_2()); }
	'..'
	{ after(grammarAccess.getThresholdAccess().getFullStopFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Threshold__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThresholdAccess().getMaxAssignment_3()); }
	(rule__Threshold__MaxAssignment_3)
	{ after(grammarAccess.getThresholdAccess().getMaxAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SensorSystem__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorSystemAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSensorSystemAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorSystem__DevicesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorSystemAccess().getDevicesDeviceParserRuleCall_2_0()); }
		ruleDevice
		{ after(grammarAccess.getSensorSystemAccess().getDevicesDeviceParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFogAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFogAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__ComsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFogAccess().getComsComParserRuleCall_2_0()); }
		ruleCom
		{ after(grammarAccess.getFogAccess().getComsComParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__DeviceAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFogAccess().getDeviceRaspPiParserRuleCall_3_0()); }
		ruleRaspPi
		{ after(grammarAccess.getFogAccess().getDeviceRaspPiParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fog__EdgeDevicesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFogAccess().getEdgeDevicesEdgeParserRuleCall_4_0()); }
		ruleEdge
		{ after(grammarAccess.getFogAccess().getEdgeDevicesEdgeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RaspPi__StorageAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRaspPiAccess().getStorageStorageParserRuleCall_2_0()); }
		ruleStorage
		{ after(grammarAccess.getRaspPiAccess().getStorageStorageParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RaspPi__VisualizationAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRaspPiAccess().getVisualizationVisualizerParserRuleCall_3_0()); }
		ruleVisualizer
		{ after(grammarAccess.getRaspPiAccess().getVisualizationVisualizerParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Storage__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStorageAccess().getTypeIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStorageAccess().getTypeIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visualizer__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisualizerAccess().getTypeIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVisualizerAccess().getTypeIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEdgeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__DeviceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAccess().getDeviceArduinoParserRuleCall_2_0()); }
		ruleArduino
		{ after(grammarAccess.getEdgeAccess().getDeviceArduinoParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arduino__RateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArduinoAccess().getRateINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getArduinoAccess().getRateINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arduino__SensorsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArduinoAccess().getSensorsSensorParserRuleCall_3_0()); }
		ruleSensor
		{ after(grammarAccess.getArduinoAccess().getSensorsSensorParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nrf24l01__TimeoutAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNrf24l01Access().getTimeoutINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNrf24l01Access().getTimeoutINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__RateAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getRateINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSensorAccess().getRateINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__PreprocessorAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getPreprocessorPreProcessorParserRuleCall_3_0()); }
		rulePreProcessor
		{ after(grammarAccess.getSensorAccess().getPreprocessorPreProcessorParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Water_level__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWater_levelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getWater_levelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sr04__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSr04Access().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSr04Access().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sound__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoundAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSoundAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Average__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAverageAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAverageAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__MinAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getThresholdAccess().getMinINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getThresholdAccess().getMinINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__MaxAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getThresholdAccess().getMaxINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getThresholdAccess().getMaxINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
